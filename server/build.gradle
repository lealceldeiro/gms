buildscript {
    ext {
        appVersion = "0.0.1"
        // versions (ordered alphabetically)
        checkStyleVersion = "8.28"
        flywayVersion = "6.3.3"
        javaassistVersion = "3.26.0-GA"
        jaxbVersion = 2.1
        jwtVersion = "0.9.1"
        lombokVersion = "1.18.12"
        refVersion = "0.9.12"
        springBootVersion = "2.2.6.RELEASE"     // keep synced with plugin org.springframework.boot declared below
        targetSource = 1.8
        // other vars
        apiDocsFolder = "apidocs"
        buildPropertiesFilePath = "./build/resources/main/application.properties"
        envSet = false
        snippetsDir = file("build/generated-snippets")
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.10.1"                  // coverage reports for coveralls.io
    id "com.moowork.node" version "1.3.1"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "net.saliman.cobertura" version "3.0.0"                      // coverage generator
    id "org.asciidoctor.convert" version "2.3.0"
    id "org.springframework.boot" version "2.2.6.RELEASE"           // keep synced with var springBootVersion
    id 'checkstyle'
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"

group = "com.gms"
version = "${appVersion}"
sourceCompatibility = targetSource

repositories {
    mavenLocal()
    mavenCentral()
}

node {
    download = false
    nodeModulesDir = file("../client")
}

dependencies {
    annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor")

    implementation ("io.jsonwebtoken:jjwt:${jwtVersion}")
    implementation ("org.flywaydb:flyway-core:${flywayVersion}")
    implementation ("org.reflections:reflections:${refVersion}")
    implementation ("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation ("org.springframework.boot:spring-boot-starter-data-rest")
    implementation ("org.springframework.boot:spring-boot-starter-hateoas")
    implementation ("org.springframework.boot:spring-boot-starter-mail")
    implementation ("org.springframework.boot:spring-boot-starter-security")
    implementation ("org.springframework.boot:spring-boot-starter-web")
    implementation ("javax.xml.bind:jaxb-api:${jaxbVersion}")
    implementation ("org.javassist:javassist:${javaassistVersion}")

    compileOnly ("org.projectlombok:lombok:${lombokVersion}")

    runtimeOnly ("org.postgresql:postgresql")
    runtimeOnly ("org.springframework.boot:spring-boot-devtools")

    testImplementation ("com.jayway.jsonpath:json-path")
    testImplementation ("org.springframework.boot:spring-boot-starter-test")
    testImplementation ("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation ("org.springframework.security:spring-security-test")

    testCompileOnly ("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor ("org.projectlombok:lombok:${lombokVersion}")
}

//region custom tasks

//region client task
task clientBuild(type: NpmTask, dependsOn: ["npmInstall", "copyClientDocBuild",  "configPackageJsonDeployUrl",
                                            "configPackageJsonBaseUrl"]
                ) {
    group = "client"
    description = "Compiles client side folder for production"
    args = ["run", "build"]
}

task configPackageJsonDeployUrl(type: NpmTask) {
    group = "client"
    description = "Sets the configuration variable 'deployUrl' in the package.json#config"
    args = ["config", "set", "client:deployUrl", getClientDeployUrl()]
}

task configPackageJsonBaseUrl(type: NpmTask) {
    group = "client"
    description = "Sets the configuration variable 'baseUrl' in the package.json#config"
    args = ["config", "set", "client:baseUrl", getClientBaseUrl()]
}

task copyClientBuild(type: Copy, dependsOn: ["clientBuild"]) {
    group = "client"
    description = "Checks all client side resources are ready for deployment and copy them into the `static` folder"
    from "../client/dist"
    into "build/resources/main/static"
}

task clientDocBuild(type: NpmTask, dependsOn: ["npmInstall"]) {
    group = "client"
    description = "Compiles client side documentation folder for production"
    args = ["run", "builddoc"]
}

task copyClientDocBuild(type: Copy, dependsOn: ["clientDocBuild"]) {
    group = "client"
    description = """Checks all client app documentation resources are ready for deployment and copy them into the
                  `static` folder"""
    from "../client/documentation"
    into "build/resources/main/static/appdocs"
}

task cleanAll(type: Delete, dependsOn: ["clean"]) {
    group = "build"
    description = "Deletes de build directory from server and client modules"
    delete '../client/documentation', '../client/dist', '../client/coverage'
    followSymlinks = true
}
//endregion

//region environments config
task setDevConfig() {
    group = "other"
    description = "Sets the environment for development mode"
    doFirst {
        final def property = getSpringAppPropertyInBuild("spring.profiles.active")
        if (property && property  != "development") {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "development")
            }
            envSet = true

            return
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild("spring.profiles.active") == "development") {
            println "Environment set for development mode..."
        }
    }
}

task setTestingConfig() {
    group = "other"
    description = "Sets the environment for testing mode"
    doFirst {
        final def property = getSpringAppPropertyInBuild("spring.profiles.active")
        if (property && property != "test") {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "test")
            }
            envSet = true

            return
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild("spring.profiles.active") == "test") {
            println "Environment set for testing mode..."
        }
    }
}

task setProductionConfig() {
    group = "other"
    description = "Sets the environment for production mode"
    doFirst {
        final def property = getSpringAppPropertyInBuild("spring.profiles.active")
        if (property && property  != "production") {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "production")
            }
            envSet = true

            return
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild("spring.profiles.active") == "production") {
            println 'Environment set for production mode...'
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
private String getSpringAppPropertyInBuild(final String propertyKey, final String filePath = null) {
    final def props = new Properties()
    final def propFile = new File(filePath ?: buildPropertiesFilePath)
    def property = null

    if (propFile.exists() && propFile.canRead()){
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey(propertyKey)) {
            property = props[propertyKey]
        }
    }
    return property
}

//endregion

//region control enabled tasks
npmInstall.enabled = installClientDependencies()
clientBuild.enabled = buildClient()
copyClientBuild.enabled = buildClient()
clientDocBuild.enabled = buildDocClient()
copyClientDocBuild.enabled = buildDocClient()

task disableNpmInstallTask(type: Exec) {
    group = "other"
    description = "Resets the state of the npmInstall task to disable once it has ran"
    doLast {
        npmInstall.enabled = false
    }
}
disableNpmInstallTask.mustRunAfter(npmInstall)

task resetConfigTaskState(type: Exec) {
    group = "other"
    description = "Resets the custom tasks to their original state"
    doLast {
        npmInstall.enabled = installClientDependencies()
        clientBuild.enabled = buildClient()
        copyClientBuild.enabled = buildClient()
        clientDocBuild.enabled = buildDocClient()
        copyClientDocBuild.enabled = buildDocClient()
        setDevConfig.enabled = true
        setTestingConfig.enabled = true
        setProductionConfig.enabled = true
    }
}
//endregion

//region api docs
asciidoctor {
    //noinspection GroovyAssignabilityCheck
    attributes "snippets": snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir "src/main/asciidoc"
}

task processApiDocs(type: Copy, dependsOn: asciidoctor) {
    group = "build"
    description = "Copies de api documentation to the destinated folder"
    from "${asciidoctor.outputDir}/html5"
    into "build/resources/main/static/" + (apiDocsFolder as String)
}
//endregion

//endregion

checkstyle {
    toolVersion checkStyleVersion
}

cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

resetConfigTaskState.mustRunAfter(bootRun, bootWar, clean)

clean.dependsOn(setDevConfig)
bootRun.dependsOn(setDevConfig)

test {
    dependsOn setTestingConfig
    outputs.dir snippetsDir
}

testClasses.dependsOn(setTestingConfig)

bootWar {
    dependsOn setProductionConfig, processApiDocs, copyClientBuild
    archivesBaseName = getAppName()
}

// In order to generate our own metadata by Using the Annotation Processor
compileJava.dependsOn(processResources)

private boolean buildClient() {
    return Boolean.parseBoolean(project.getProperties().get("client").toString())
}

private boolean installClientDependencies() {
    return Boolean.parseBoolean(project.getProperties().get("clientDependencies").toString())
}

private boolean buildDocClient() {
    return Boolean.parseBoolean(project.getProperties().get("clientDoc").toString())
}

private String getAppName() {
    return getSpringAppPropertyInBuild("spring.application.name", "./src/main/resources/application.properties")
}

private String getClientDeployUrl() {
    final String defaultUrl = "/${getAppName()}-${version}/"
    final String configUrl  = project.getProperties().get("clientDeployUrl")

    return (configUrl || configUrl == "<default>") ? (configUrl == "<default>" ? "" : configUrl) : defaultUrl
}

private String getClientBaseUrl() {
    final String defaultUrl = "/${getAppName()}-${version}/"
    final String configUrl  = project.getProperties().get("clientBaseUrl")

    return configUrl ?: defaultUrl
}
